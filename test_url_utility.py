#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL –∏–∑ HTML
–ü–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ HTML
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

from link_analyzer import WebsiteCrawler

def test_html_extraction(html_content, test_name="Test"):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏–∑ HTML"""
    print(f"\n{'='*60}")
    print(f"üß™ {test_name}")
    print(f"{'='*60}")
    
    crawler = WebsiteCrawler("https://example.com", max_pages=1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π HTML
    print("üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π HTML:")
    print("-" * 40)
    print(html_content.strip())
    print("-" * 40)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏
    links = crawler.extract_links_from_page("https://example.com/test", html_content)
    
    print(f"\nüîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(links)}")
    print("-" * 40)
    
    for i, link in enumerate(links, 1):
        print(f"{i}. {link['url']}")
        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: <{link['tag']} {link['attribute']}>")
        print(f"   –¢–∏–ø: {link['link_type']}")
        if link['text']:
            print(f"   –¢–µ–∫—Å—Ç: {link['text'][:50]}...")
        print()
    
    return links

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    print("üîß –£–¢–ò–õ–ò–¢–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø URL EXTRACTION")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫")
    
    # –¢–µ—Å—Ç 1: URL —Å %-encoding
    html1 = """
    <html>
    <body>
        <p>–ü–æ–∏—Å–∫: https://example.com/search?q=hello%20world%26test</p>
        <p>API: https://api.service.com/users?filter=%7B%22name%22%3A%22John%22%7D</p>
        <a href="https://site.com/path%20with%20spaces">Link</a>
    </body>
    </html>
    """
    
    links1 = test_html_extraction(html1, "URL —Å %-encoding")
    
    # –¢–µ—Å—Ç 2: –°–ª–æ–∂–Ω—ã–µ URL 
    html2 = """
    <html>
    <body>
        <p>OAuth: https://oauth.example.com/authorize?response_type=code&client_id=123&redirect_uri=https%3A%2F%2Fapp.com%2Fcallback</p>
        <p>Graph API: https://graph.microsoft.com/v1.0/users?$filter=startswith(displayName,%27J%27)&$select=displayName,mail</p>
    </body>
    </html>
    """
    
    links2 = test_html_extraction(html2, "–°–ª–æ–∂–Ω—ã–µ URL —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º encoding")
    
    # –¢–µ—Å—Ç 3: URL –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö
    html3 = """
    <html>
    <body>
        <p>–í —Å–∫–æ–±–∫–∞—Ö: (https://example.com/bracketed%20url)</p>
        <p>–í –∫–∞–≤—ã—á–∫–∞—Ö: "https://example.com/quoted%20url"</p>
        <p>–í –∫–æ–Ω—Ü–µ: –°–º–æ—Ç—Ä–∏—Ç–µ https://example.com/end%20url.</p>
        <p>JSON: {"url": "https://example.com/json%20url"}</p>
    </body>
    </html>
    """
    
    links3 = test_html_extraction(html3, "URL –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö")
    
    # –¢–µ—Å—Ç 4: –†–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ URL
    html4 = """
    <html>
    <body>
        <p>–ü—Ä–æ–±–ª–µ–º–Ω—ã–π URL: http://www.w3.org/2000/svg'%3E%3Cpath%20d%3D%22M10%2C10%20L20%2C20%22%3E%3C%2Fpath%3E</p>
        <p>–î—Ä—É–≥–æ–π —Å–ª—É—á–∞–π: https://cdn.example.com/file.js?v=1.0&hash=%2Fa1b2c3%2F</p>
    </body>
    </html>
    """
    
    links4 = test_html_extraction(html4, "–†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ URL")
    
    # –°–≤–æ–¥–∫–∞
    total_links = len(links1) + len(links2) + len(links3) + len(links4)
    encoded_links = 0
    
    for links in [links1, links2, links3, links4]:
        for link in links:
            if '%' in link['url']:
                encoded_links += 1
    
    print(f"\n{'='*60}")
    print("üìä –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"{'='*60}")
    print(f"–í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {total_links}")
    print(f"–°—Å—ã–ª–æ–∫ —Å %-encoding: {encoded_links}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —Å encoding: {(encoded_links/total_links*100):.1f}%" if total_links > 0 else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    if encoded_links > 0:
        print("\n‚úÖ URL —Å %-encoding –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –Ω–∞–¥–æ.")
    else:
        print("\n‚ö†Ô∏è  URL —Å %-encoding –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        print("–í–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()